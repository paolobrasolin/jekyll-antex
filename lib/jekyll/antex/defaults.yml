preamble: |
  \usepackage{mathtools, amssymb}
  \usepackage{tikz}
template: |
  \documentclass{article}
  \pagestyle{empty}
  {{ preamble }}
  \newsavebox\snippet
  \begin{lrbox}{\snippet}{{ prepend }}{{ snippet }}{{ append }}\end{lrbox}
  \newwrite\file
  \immediate\openout\file=\jobname.yml
  \immediate\write\file{em: \the\dimexpr1em}
  \immediate\write\file{ex: \the\dimexpr1ex}
  \immediate\write\file{ht: \the\ht\snippet}
  \immediate\write\file{dp: \the\dp\snippet}
  \immediate\write\file{wd: \the\wd\snippet}
  \closeout\file
  \begin{document}\usebox{\snippet}\end{document}
classes: [antex]
pipeline:
  - latexmk
  - dvisvgm_tfm
  - dvisvgm_fit
  - cp_to_dest
dirs:
  work: .antex-cache
  dest: .antex-cache/antex
files:
  tex: "{{ dir.work }}/{{ hash }}.tex"
  dvi: "{{ dir.work }}/{{ hash }}.dvi"
  yml: "{{ dir.work }}/{{ hash }}.yml"
  tfm: "{{ dir.work }}/{{ hash }}.tfm.svg"
  fit: "{{ dir.work }}/{{ hash }}.fit.svg"
  svg: "{{ dir.dest }}/{{ hash }}.svg"
commands:
  latexmk:
    command:
      - "latexmk"
      - "-output-directory={{ dir.work }}"
      - "{{ file.tex }}"
    sources:
      - "{{ file.tex }}"
    targets:
      - "{{ file.dvi }}"
      - "{{ file.yml }}"
  dvisvgm_tfm:
    command:
      - "dvisvgm"
      - "--no-fonts"
      - "{{ file.dvi }}"
      - "--output={{ file.tfm }}"
    sources:
      - "{{ file.dvi }}"
    targets:
      - "{{ file.tfm }}"
  dvisvgm_fit:
    command:
      - "dvisvgm"
      - "--no-fonts"
      - "--exact"
      - "{{ file.dvi }}"
      - "--output={{ file.fit }}"
    sources:
      - "{{ file.dvi }}"
    targets:
      - "{{ file.fit }}"
  cp_to_dest:
    command:
      - "cp"
      - "{{ file.fit }}"
      - "{{ file.svg }}"
    sources:
      - "{{ file.fit }}"
    targets:
      - "{{ file.svg }}"
guards:
  comment:
    priority: 1000
    regexp: !ruby/regexp |
      /<!---
      .*?
      --->/mx
  verbatim:
    priority: 100
    regexp: !ruby/regexp |
      /```
      .*?
      ```/mx
aliases:
  # 'internal' must have the highest priority;
  # it is the liquid tag all other aliases are rendered to.
  internal:
    priority: 1000
    regexp: !ruby/regexp |
      /{%\s*antex\s*(?<markup>.*?)%}
      (?<code>.*?)
      {%\s*endantex\s*%}/mx
  # 'default' is the standard generic purpose alias.
  # Since it can contain tikz pictures,
  # it must have higher priority than 'tikzpicture' alias.
  default:
    priority: 100
    regexp: !ruby/regexp |
      /{%\s*tex\s*(?<markup>.*?)%}
      (?<code>.*?)
      {%\s*endtex\s*%}/mx
  tikzpicture:
    priority: 90
    regexp: !ruby/regexp |
      /{%\s*tikz\s*(?<markup>.*?)%}
      (?<code>.*?)
      {%\s*endtikz\s*%}/mx
    options:
      prepend: '\\begin{tikzpicture}'
      append: '\\end{tikzpicture}'
      classes: [antex, tikz]
  # 'display_math' must have a higher priority than 'inline_math'
  # since the respective deliniters are double and single dollars.
  display_math:
    priority: 20
    regexp: !ruby/regexp |
      /\$\$
      (?<code>.*?)
      \$\$/mx
    options:
      prepend: '$\\displaystyle'
      append: $
      classes: [antex, display]
  inline_math:
    priority: 10
    regexp: !ruby/regexp |
      /\$(?<code>.*?)\$/x
    options:
      prepend: $
      append: $
      classes: [antex, inline]
  # 'inline_macro' must have the lowest priority
  # to avoid interference with others aliases.
  inline_macro:
    priority: 0
    regexp: !ruby/regexp |
      /(?<code>\\[A-z]+)/x
    options:
      classes: [antex, inline]
inlining: false
