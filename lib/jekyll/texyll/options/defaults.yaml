# shallow that are overwritten by merging
dest_dir: texyll
work_dir: .texyll-cache
preamble: |
  \usepackage{amsmath, amsthm, amssymb, amsfonts}
  \usepackage{tikz}
  \usepackage{graphicx}
template: |
  \documentclass{article}
  \pagestyle{empty}
  {{preamble}}
  \newsavebox\snippet
  \begin{lrbox}{\snippet}{{prepend}}{{snippet}}{{append}}\end{lrbox}
  \newwrite\file
  \immediate\openout\file=\jobname.yml
  \immediate\write\file{em: \the\dimexpr1em}
  \immediate\write\file{ex: \the\dimexpr1ex}
  \immediate\write\file{ht: \the\ht\snippet}
  \immediate\write\file{dp: \the\dp\snippet}
  \immediate\write\file{wd: \the\wd\snippet}
  \closeout\file
  \begin{document}\usebox{\snippet}\end{document}
classes: [texyll]
pipeline:
  - latexmk
  - dvisvgm_tfm
  - dvisvgm_fit
engines:
  latexmk:
    command:
      - latexmk
      - -output-directory=<%=dir(:work)%>
      - <%=file(:tex)%>
    sources:
      - <%=file(:tex)%>
    targets:
      - <%=file(:dvi)%>
      - <%=file(:yml)%>
  dvisvgm_tfm:
    command:
      - dvisvgm
      - --no-fonts
      - <%=file(:dvi)%>
      - --output=<%=file(:tfm)%>
    sources:
      - <%=file(:dvi)%>
    targets:
      - <%=file(:tfm)%>
  dvisvgm_fit:
    command:
      - dvisvgm
      - --no-fonts
      - --exact
      - <%=file(:dvi)%>
      - --output=<%=file(:fit)%>
    sources:
      - <%=file(:dvi)%>
    targets:
      - <%=file(:fit)%>
aliases:
  default:
    priority: 100
    regexp: !ruby/regexp
      /{%\s*tex\s*(?<markup>.*?)%}(?<code>.*?){%\s*endtex\s*%}/m
  tikzpicture:
    priority: 90
    regexp: !ruby/regexp
      /{%\s*tikz\s*(?<markup>.*?)%}(?<code>.*?){%\s*endtikz\s*%}/m
    options:
      prepend: '\\begin{tikzpicture}'
      append: '\\end{tikzpicture}'
      classes: [texyll, tikz]
  display_math:
    priority: 20
    regexp: !ruby/regexp /\$\$(?<code>.*?)\$\$/m
    options:
      prepend: '$\\displaystyle'
      append: $
      classes: [texyll, display]
  inline_math:
    priority: 10
    regexp: !ruby/regexp /\$(?<code>.*?)\$/
    options:
      prepend: $
      append: $
      classes: [texyll, inline]
  simple_macro:
    priority: 0
    regexp: !ruby/regexp /(?<code>\\[A-z]+)/
    options:
      prepend:
      append:
      classes: [texyll, inline]
