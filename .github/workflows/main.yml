name: CI

on:
  push:
  pull_request:

jobs:
  test:
    name: >-
      ${{ matrix.os }} ${{ matrix.ruby }}
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu ]
        ruby: [ '2.6', '2.7' ]

    steps:

      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby }}

      - name: Cache Ruby gems
        uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: gems-${{ matrix.os }}-${{ matrix.ruby }}-${{ hashFiles('Gemfile', 'jekyll-antex.gemspec') }}
          restore-keys: gems-${{ matrix.os }}-${{ matrix.ruby }}-

      - name: Install Ruby gems
        run: |
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3

      - name: Cache TeXLive distribution
        uses: actions/cache@v2
        id: cache-texlive
        with:
          path: ${{ runner.tool_cache }}/texlive
          key: texlive-${{ matrix.os }}-${{ hashFiles('.github/texlive.*') }}
          restore-keys: texlive-${{ matrix.os }}-

      - name: Install TeXLive (infraonly)
        if: steps.cache-texlive.outputs.cache-hit != 'true'
        env:
          TEXLIVE_INSTALL_PREFIX: ${{ runner.tool_cache }}/texlive
          TEXLIVE_PROFILE_PATH: ${{ github.workspace }}/.github/texlive.profile
        run: |
          cd ${{ runner.temp }}
          wget -q http://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz
          tar -xzf install-tl-unx.tar.gz
          cd install-tl-20* || exit 1
          ./install-tl --portable --profile="$TEXLIVE_PROFILE_PATH"
          echo "$TEXLIVE_INSTALL_PREFIX/bin/x86_64-linux" >> $GITHUB_PATH

      - name: Install TeXLive packages
        if: steps.cache-texlive.outputs.cache-hit != 'true'
        env:
          TEXLIVE_PACKAGES_PATH: ${{ github.workspace }}/.github/texlive.packages
        run: |
          readarray -t TEXLIVE_PACKAGES < <(grep -v '^#' "$TEXLIVE_PACKAGES_PATH")
          tlmgr install "${TEXLIVE_PACKAGES[@]}"

      - name: Update TeXLive distribution
        if: steps.cache-texlive.outputs.cache-hit == 'true'
        env:
          TEXLIVE_INSTALL_PREFIX: ${{ runner.tool_cache }}/texlive
          TEXLIVE_PROFILE_PATH: ${{ github.workspace }}/.github/texlive.profile
        run: |
          PATH=$TEXLIVE_INSTALL_PREFIX/bin/x86_64-linux:$PATH
          tlmgr update --self
          tlmgr update --all
          echo "$TEXLIVE_INSTALL_PREFIX/bin/x86_64-linux" >> $GITHUB_PATH

      - name: Run tests
        run: bundle exec rspec

  coverage:
    needs: [ test ]
    name: coverage
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu ]
        ruby: [ '2.7' ]

    steps:

      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby }}

      - name: Cache Ruby gems
        uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: gems-${{ matrix.os }}-${{ matrix.ruby }}-${{ hashFiles('Gemfile', 'jekyll-antex.gemspec') }}
          restore-keys: gems-${{ matrix.os }}-${{ matrix.ruby }}-

      - name: Install Ruby gems
        run: |
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3

      - name: Cache TeXLive distribution
        uses: actions/cache@v2
        id: cache-texlive
        with:
          path: ${{ runner.tool_cache }}/texlive
          key: texlive-${{ matrix.os }}-${{ hashFiles('.github/texlive.*') }}
          restore-keys: texlive-${{ matrix.os }}-

      - name: Install TeXLive (infraonly)
        if: steps.cache-texlive.outputs.cache-hit != 'true'
        env:
          TEXLIVE_INSTALL_PREFIX: ${{ runner.tool_cache }}/texlive
          TEXLIVE_PROFILE_PATH: ${{ github.workspace }}/.github/texlive.profile
        run: |
          cd ${{ runner.temp }}
          wget -q http://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz
          tar -xzf install-tl-unx.tar.gz
          cd install-tl-20* || exit 1
          ./install-tl --portable --profile="$TEXLIVE_PROFILE_PATH"
          echo "$TEXLIVE_INSTALL_PREFIX/bin/x86_64-linux" >> $GITHUB_PATH

      - name: Install TeXLive packages
        if: steps.cache-texlive.outputs.cache-hit != 'true'
        env:
          TEXLIVE_PACKAGES_PATH: ${{ github.workspace }}/.github/texlive.packages
        run: |
          readarray -t TEXLIVE_PACKAGES < <(grep -v '^#' "$TEXLIVE_PACKAGES_PATH")
          tlmgr install "${TEXLIVE_PACKAGES[@]}"

      - name: Update TeXLive distribution
        if: steps.cache-texlive.outputs.cache-hit == 'true'
        env:
          TEXLIVE_INSTALL_PREFIX: ${{ runner.tool_cache }}/texlive
          TEXLIVE_PROFILE_PATH: ${{ github.workspace }}/.github/texlive.profile
        run: |
          PATH=$TEXLIVE_INSTALL_PREFIX/bin/x86_64-linux:$PATH
          tlmgr update --self
          tlmgr update --all
          echo "$TEXLIVE_INSTALL_PREFIX/bin/x86_64-linux" >> $GITHUB_PATH

      - name: Test and publish coverage to Code Climate
        uses: paambaati/codeclimate-action@v3.0.0
        env:
          CC_TEST_REPORTER_ID: f0e049df5884387225a489a80624f65545d27247c03ab7744f4e7c06c8600178
        with:
          coverageCommand: bundle exec rspec
          coverageLocations: ${{ github.workspace }}/coverage/coverage.json:simplecov
