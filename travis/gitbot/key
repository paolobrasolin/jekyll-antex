#!/usr/bin/env bash

# Exit with nonzero exit code if anything fails.
set -e

#===[ Initialization: variables ]===============================================

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

REPO=$(git config remote.origin.url)
SLUG=${REPO#*com/}
SLUG=${SLUG%.git}

NAME=$SLUG@travis-ci.org

#===[ Initialization: functions ]===============================================

title (){
  printf "\n#==[ %s ]\n\n" "$1"
}

get_id_of_key (){
  declare KEY="$1"
  curl \
    --silent \
    --user "$GH_USERNAME:$GH_PASSWORD" \
    --url "https://api.github.com/repos/$SLUG/keys" \
  | \
  jq \
    --raw-output \
    ".[] | select(.key == \"$KEY\") | .id"
}

delete_key_with_id (){
  declare ID="$1"
  curl \
    -X DELETE \
    --user "$GH_USERNAME:$GH_PASSWORD" \
    "https://api.github.com/repos/$SLUG/keys/$ID"
}

generate_post_data_for_key_addition (){
  declare title="$1", key="$2"
  cat <<EOF
{
  "title": "$title",
  "key": "$key",
  "read_only": false
}
EOF
}

post_key_addition_and_get_id (){
  declare data="$1"
  curl \
    --silent \
    -X POST \
    --data "$data" \
    --user "$GH_USERNAME:$GH_PASSWORD" \
    "https://api.github.com/repos/$SLUG/keys" \
  | \
  jq \
    --raw-output \
    ".id"
}

#===[ Github login ]============================================================

title "Github login"

read -r -p "User name: " GH_USERNAME
read -r -p "Password (hidden): " -s GH_PASSWORD
printf "\n"

#===[ Remove current local public key from Github. ]============================

title "Remove old deploy key from Github"

PUBLIC_KEY=$(<"$DIR/deploy_key.pub")
# We expunge the comment from the key: GH API doesn't like it.
PUBLIC_KEY=${PUBLIC_KEY% *}

ID=$(get_id_of_key "$PUBLIC_KEY")

if [ -z "$ID" ]; then
  printf "The current local public key is not registred on Github.\n"
else
  printf "The current local public key registred on Github with id %s.\n" "$ID"
  printf "Removing it... "
  delete_key_with_id "$ID"
  printf "Done.\n"
fi

#===[ Delete local keypair. ]===================================================

title "Delete old keypair"

rm "$DIR"/deploy_key.pub
rm "$DIR"/deploy_key.enc
printf "Done.\n"

#===[ Generate new keypair. ]===================================================

title "Generate new keypair"

ssh-keygen \
  -t rsa \
  -b 4096 \
  -N '' \
  -C "$NAME" \
  -f "$DIR/deploy_key"

#===[ Encrypt private key. ]====================================================

title "Encrypt private key"

travis_stdout=$(mktemp)
travis encrypt-file "$DIR/deploy_key" | tee "$travis_stdout"

#===[ Delete unencrypted private key. ]=========================================

title "Delete unencripted private key"

rm "$DIR"/deploy_key
echo "Done."

#===[ Reconfigure push script. ]=============================================

title "Reconfigure push script"

ENCRYPTED_KEY_ENV_VAR_NAME=$(grep -o "encrypted_\S*_key" "$travis_stdout")
ENCRYPTED_IV_ENV_VAR_NAME=$(grep -o "encrypted_\S*_iv" "$travis_stdout")
sed -i "s/encrypted_\S*_key/$ENCRYPTED_KEY_ENV_VAR_NAME/g" "$DIR/push"
sed -i "s/encrypted_\S*_iv/$ENCRYPTED_IV_ENV_VAR_NAME/g" "$DIR/push"

rm "$travis_stdout"
echo "Done."

#===[ Add pulic key to Github deploy keys. ]====================================

title "Add public key to Github deploy keys"

PUBLIC_KEY=$(<"$DIR/deploy_key.pub")
DATA=$(generate_post_data_for_key_addition "$NAME" "$PUBLIC_KEY")
ID=$(post_key_addition_and_get_id "$DATA")

if [ -z "$ID" ]; then
  printf "There was a problem adding the deploy key to Github.\n\n"
else
  printf "The new public key is now registred on Github with id %s.\n\n" "$ID"
fi

